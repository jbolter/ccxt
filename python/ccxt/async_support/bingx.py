# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.async_support.base.exchange import Exchange
from ccxt.abstract.bingx import ImplicitAPI
import hashlib
from ccxt.base.types import OrderSide
from typing import Optional
from typing import List
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import PermissionDenied
from ccxt.base.errors import BadRequest
from ccxt.base.errors import BadSymbol
from ccxt.base.errors import InsufficientFunds
from ccxt.base.errors import OrderNotFound
from ccxt.base.errors import NotSupported
from ccxt.base.errors import DDoSProtection
from ccxt.base.errors import ExchangeNotAvailable
from ccxt.base.errors import AuthenticationError
from ccxt.base.decimal_to_precision import DECIMAL_PLACES


class bingx(Exchange, ImplicitAPI):

    def describe(self):
        return self.deep_extend(super(bingx, self).describe(), {
            'id': 'bingx',
            'name': 'BingX',
            'countries': ['US'],  # North America, Canada, the EU, Hong Kong and Taiwan
            # cheapest is 60 requests a minute = 1 requests per second on average =>( 1000ms / 1) = 1000 ms between requests on average
            'rateLimit': 1000,
            'version': 'v1',
            'certified': True,
            'pro': True,
            'has': {
                'CORS': None,
                'spot': True,
                'margin': True,
                'swap': True,
                'future': False,
                'option': False,
                'fetchBalance': True,
                'fetchFundingRate': True,
                'fetchFundingRateHistory': True,
                'fetchMarkets': True,
                'fetchOHLCV': True,
                'fetchOpenInterest': True,
                'fetchOrderBook': True,
                'fetchTicker': True,
                'fetchTickers': True,
                'fetchTrades': True,
            },
            'hostname': 'bingx.com',
            'urls': {
                'logo': '',
                'api': {
                    'spot': 'https://open-api.bingx.com/openApi',
                    'swap': 'https://open-api.bingx.com/openApi',
                    'contract': 'https://open-api.bingx.com/openApi',
                },
                'www': '',
                'doc': '',
                'referral': {
                },
                'fees': '',
            },
            'requiredCredentials': {
                'apiKey': True,
                'secret': True,
            },
            'api': {
                'spot': {
                    'v1': {
                        'public': {
                            'get': {
                                'common/symbols': 3,
                                'market/trades': 3,
                                'market/depth': 3,
                            },
                        },
                        'private': {
                            'get': {
                                'trade/query': 3,
                                'trade/openOrders': 3,
                                'trade/historyOrders': 3,
                                'account/balance': 3,
                            },
                            'post': {
                                'trade/order': 3,
                                'trade/cancel': 3,
                            },
                        },
                    },
                    'v3': {
                        'private': {
                            'get': {
                                'get/asset/transfer': 3,
                                'asset/transfer': 3,
                                'capital/deposit/hisrec': 3,
                                'capital/withdraw/history': 3,
                            },
                        },
                    },
                },
                'swap': {
                    'v2': {
                        'public': {
                            'get': {
                                'server/time': 3,
                                'quote/contracts': 1,
                                'quote/price': 1,
                                'quote/depth': 1,
                                'quote/trades': 1,
                                'quote/premiumIndex': 1,
                                'quote/fundingRate': 1,
                                'quote/klines': 1,
                                'quote/openInterest': 1,
                                'quote/ticker': 1,
                            },
                        },
                        'private': {
                            'get': {
                                'user/balance': 3,
                                'user/positions': 3,
                                'user/income': 3,
                                'trade/openOrders': 3,
                                'trade/order': 3,
                                'trade/marginType': 3,
                                'trade/leverage': 3,
                                'trade/forceOrders': 3,
                                'trade/allOrders': 3,
                            },
                            'post': {
                                'trade/order': 3,
                                'trade/batchOrders': 3,
                                'trade/closeAllPositions': 3,
                                'trade/marginType': 3,
                                'trade/leverage': 3,
                                'trade/positionMargin': 3,
                            },
                            'delete': {
                                'trade/order': 3,
                                'trade/batchOrders': 3,
                                'trade/allOpenOrders': 3,
                            },
                        },
                    },
                },
                'contract': {
                    'v1': {
                        'private': {
                            'get': {
                                'allPosition': 3,
                                'allOrders': 3,
                                'balance': 3,
                            },
                        },
                    },
                },
            },
            'timeframes': {
                '1m': '1m',
                '3m': '3m',
                '5m': '5m',
                '15m': '15m',
                '30m': '30m',
                '1h': '1h',
                '2h': '2h',
                '4h': '4h',
                '6h': '6h',
                '12h': '12h',
                '1d': '1d',
                '3d': '3d',
                '1w': '1w',
                '1M': '1M',
            },
            'fees': {
                'trading': {
                },
            },
            'precisionMode': DECIMAL_PLACES,
            'exceptions': {
                'exact': {
                    '400': BadRequest,
                    '401': AuthenticationError,
                    '403': PermissionDenied,
                    '404': BadRequest,
                    '429': DDoSProtection,
                    '418': PermissionDenied,
                    '500': ExchangeError,
                    '504': ExchangeError,
                    '100001': AuthenticationError,
                    '100202': InsufficientFunds,
                    '100400': BadRequest,
                    '100440': ExchangeError,
                    '100500': ExchangeError,
                    '100503': ExchangeError,
                    '80001': BadRequest,
                    '80012': ExchangeNotAvailable,
                    '80014': BadRequest,
                    '80016': OrderNotFound,
                    '80017': OrderNotFound,
                },
                'broad': {},
            },
            'commonCurrencies': {
            },
            'options': {
                'accountsByType': {
                    'spot': 'FUND',
                    'swap': 'PFUTURES',
                    'future': 'SFUTURES',
                },
                'accountsById': {
                    'FUND': 'spot',
                    'PFUTURES': 'swap',
                    'SFUTURES': 'future',
                },
            },
        })

    async def fetch_time(self, params={}):
        """
        fetches the current integer timestamp in milliseconds from the bingx server
        see https://bingx-api.github.io/docs/swapV2/base-info.html#get-server-time
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns int: the current integer timestamp in milliseconds from the bingx server
        """
        response = await self.swapV2PublicGetServerTime(params)
        #
        #  {
        #      "code": 0,
        #      "msg": "",
        #      "data": {
        #          "serverTime": 1675319535362
        #      }
        #  }
        #
        data = self.safe_value(response, 'data')
        return self.safe_integer(data, 'serverTime')

    async def fetch_spot_markets(self, params):
        response = await self.spotV1PublicGetCommonSymbols(params)
        #
        #    {
        #    "code": 0,
        #        "msg": "",
        #        "debugMsg": "",
        #        "data": {
        #          "symbols": [
        #            {
        #              "symbol": "GEAR-USDT",
        #              "minQty": 735,
        #              "maxQty": 2941177,
        #              "minNotional": 5,
        #              "maxNotional": 20000,
        #              "status": 1,
        #              "tickSize": 0.000001,
        #              "stepSize": 1
        #            },
        #          ]
        #        }
        #    }
        #
        result = []
        data = self.safe_value(response, 'data')
        markets = self.safe_value(data, 'symbols')
        for i in range(0, len(markets)):
            result.append(self.parse_market(markets[i]))
        return result

    async def fetch_swap_markets(self, params):
        response = await self.swapV2PublicGetQuoteContracts(params)
        #
        #    {
        #        "code": 0,
        #        "msg": "",
        #        "data": [
        #          {
        #            "contractId": "100",
        #            "symbol": "BTC-USDT",
        #            "size": "0.0001",
        #            "quantityPrecision": 4,
        #            "pricePrecision": 1,
        #            "feeRate": 0.0005,
        #            "tradeMinLimit": 1,
        #            "maxLongLeverage": 150,
        #            "maxShortLeverage": 150,
        #            "currency": "USDT",
        #            "asset": "BTC",
        #            "status": 1
        #          },
        #        ]
        #    }
        #
        result = []
        markets = self.safe_value(response, 'data')
        for i in range(0, len(markets)):
            result.append(self.parse_market(markets[i]))
        return result

    def parse_market(self, market):
        id = self.safe_string(market, 'symbol')
        symbolParts = id.split('-')
        baseId = symbolParts[0]
        quoteId = symbolParts[1]
        base = self.safe_currency_code(baseId)
        quote = self.safe_currency_code(quoteId)
        currency = self.safe_string(market, 'currency')
        settle = self.safe_currency_code(currency)
        pricePrecision = self.safe_number(market, 'pricePrecision')
        quantityPrecision = self.safe_number(market, 'quantityPrecision')
        if pricePrecision is None:
            tickSize = self.safe_string(market, 'tickSize')
            tickSizeSplit = tickSize.split('.')
            stepSize = self.safe_string(market, 'stepSize')
            stepSizeSplit = stepSize.split('.')
            if len(tickSizeSplit) > 1:
                pricePrecision = len(tickSizeSplit[1])
            else:
                pricePrecision = 0
            if len(stepSizeSplit) > 1:
                quantityPrecision = len(stepSizeSplit[1])
            else:
                quantityPrecision = 0
        type = 'swap' if (settle is not None) else 'spot'
        spot = type == 'spot'
        swap = type == 'swap'
        symbol = base + '/' + quote
        if settle is not None:
            symbol += ':' + settle
        contractSize = self.safe_number(market, 'tradeMinLimit')
        entry = {
            'id': id,
            'symbol': symbol,
            'base': base,
            'quote': quote,
            'settle': settle,
            'baseId': baseId,
            'quoteId': quoteId,
            'settleId': currency,
            'type': type,
            'spot': spot,
            'margin': False,
            'swap': swap,
            'future': False,
            'option': False,
            'active': self.safe_string(market, 'status') is True if '1' else False,
            'contract': swap,
            'linear': swap,
            'inverse': False,
            'taker': None,
            'maker': None,
            'contractSize': contractSize,
            'expiry': None,
            'expiryDatetime': None,
            'strike': None,
            'optionType': None,
            'precision': {
                'amount': quantityPrecision,
                'price': pricePrecision,
                'base': None,
                'quote': None,
            },
            'limits': {
                'leverage': {
                    'min': None,
                    'max': None,
                },
                'amount': {
                    'min': self.safe_number(market, 'minQty'),
                    'max': self.safe_number(market, 'maxQty'),
                },
                'price': {
                    'min': None,
                    'max': None,
                },
                'cost': {
                    'min': self.safe_number(market, 'minNotional'),
                    'max': self.safe_number(market, 'maxNotional'),
                },
            },
            'info': market,
        }
        return entry

    async def fetch_markets(self, params={}):
        """
        retrieves data on all markets for bingx
        see https://bingx-api.github.io/docs/swapV2/market-api.html#_1-contract-information
        see https://bingx-api.github.io/docs/spot/market-interface.html#query-symbols
        :param dict params: extra parameters specific to the exchange api endpoint
        :returns [dict]: an array of objects representing market data
        """
        marketType = None
        marketType, params = self.handle_market_type_and_params('fetchMarkets', None, params)
        if marketType == 'spot':
            return await self.fetch_spot_markets(params)
        elif marketType == 'swap':
            return await self.fetch_swap_markets(params)

    async def fetch_ohlcv(self, symbol: str, timeframe='1m', since: Optional[int] = None, limit: Optional[int] = None, params={}):
        """
        fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        see https://bingx-api.github.io/docs/swap/market-api.html#_7-get-k-line-data
        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param int|None since: timestamp in ms of the earliest candle to fetch
        :param int|None limit: the maximum amount of candles to fetch
        :param dict params: extra parameters specific to the bingx api endpoint
        :param str|None params['price']: "mark" or "index" for mark price and index price candles
        :param int|None params['until']: timestamp in ms of the latest candle to fetch
        :returns [[int]]: A list of candles ordered, open, high, low, close, volume
        """
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        request['interval'] = self.safe_string(self.timeframes, timeframe, timeframe)
        if since is not None:
            request['startTime'] = since
        if limit is not None:
            request['limit'] = limit
        if market['spot']:
            raise NotSupported(self.id + ' fetchOHLCV is not supported for spot markets')
        response = await self.swapV2PublicGetQuoteKlines(self.extend(request, params))
        #
        #    {
        #        "code": 0,
        #        "msg": "",
        #        "data": [
        #          {
        #            "open": "19396.8",
        #            "close": "19394.4",
        #            "high": "19397.5",
        #            "low": "19385.7",
        #            "volume": "110.05",
        #            "time": 1666583700000
        #          },
        #          {
        #            "open": "19394.4",
        #            "close": "19379.0",
        #            "high": "19394.4",
        #            "low": "19368.3",
        #            "volume": "167.44",
        #            "time": 1666584000000
        #          }
        #        ]
        #    }
        #
        ohlcvs = self.safe_value(response, 'data', [])
        if isinstance(ohlcvs, dict):
            ohlcvs = [ohlcvs]
        return self.parse_ohlcvs(ohlcvs, market, timeframe, since, limit)

    def parse_ohlcv(self, ohlcv, market=None):
        #
        #    {
        #        "open": "19394.4",
        #        "close": "19379.0",
        #        "high": "19394.4",
        #        "low": "19368.3",
        #        "volume": "167.44",
        #        "time": 1666584000000
        #    }
        #
        return [
            self.safe_integer(ohlcv, 'time'),
            self.safe_number(ohlcv, 'open'),
            self.safe_number(ohlcv, 'high'),
            self.safe_number(ohlcv, 'low'),
            self.safe_number(ohlcv, 'close'),
            self.safe_number(ohlcv, 'volume'),
        ]

    async def fetch_trades(self, symbol: str, since: Optional[int] = None, limit: Optional[int] = None, params={}):
        """
        get the list of most recent trades for a particular symbol
        see https://bingx-api.github.io/docs/spot/market-interface.html#query-transaction-records
        see https://bingx-api.github.io/docs/swapV2/market-api.html#_4-the-latest-trade-of-a-trading-pair
        :param str symbol: unified symbol of the market to fetch trades for
        :param int|None since: timestamp in ms of the earliest trade to fetch
        :param int|None limit: the maximum amount of trades to fetch
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns [dict]: a list of `trade structures <https://docs.ccxt.com/en/latest/manual.html?#public-trades>`
        """
        await self.load_markets()
        market = self.market(symbol)
        method = None
        marketType = None
        marketType, params = self.handle_market_type_and_params('fetchTrades', market, params)
        if marketType == 'spot':
            method = 'spotV1PublicGetMarketTrades'
        else:
            method = 'swapV2PublicGetQuoteTrades'
        request = {
            'symbol': market['id'],
        }
        if limit is not None:
            request['limit'] = limit
        response = await getattr(self, method)(self.extend(request, params))
        #
        # spot
        #
        #      {
        #          "code": 0,
        #          "data": [
        #              {
        #                  "id": 43148253,
        #                  "price": 25714.71,
        #                  "qty": 1.674571,
        #                  "time": 1655085975589,
        #                  "buyerMaker": False
        #              }
        #          ]
        #      }
        #
        # swap
        #
        #     {
        #       "code":0,
        #       "msg":"",
        #       "data":[
        #         {
        #           "time": 1672025549368,
        #           "isBuyerMaker": True,
        #           "price": "16885.0",
        #           "qty": "3.3002",
        #           "quoteQty": "55723.87"
        #         },
        #         {
        #           "time": 1672025549368,
        #           "isBuyerMaker": False,
        #           "price": "16884.0",
        #           "qty": "1.9190",
        #           "quoteQty": "32400.40"
        #         }
        #       ]
        #     }
        #
        trades = self.safe_value(response, 'data', [])
        return self.parse_trades(trades, market, since, limit)

    def parse_trade(self, trade, market=None):
        #
        # spot
        # fetchTrades
        #
        #     {
        #         "id": 43148253,
        #         "price": 25714.71,
        #         "qty": 1.674571,
        #         "time": 1655085975589,
        #         "buyerMaker": False
        #     }
        #
        # swap
        # fetchTrades
        #
        #     {
        #       "time": 1672025549368,
        #       "isBuyerMaker": True,
        #       "price": "16885.0",
        #       "qty": "3.3002",
        #       "quoteQty": "55723.87"
        #     }
        #
        id = self.safe_string(trade, 'id')
        time = self.safe_integer(trade, 'time')
        price = self.safe_string(trade, 'price')
        qty = self.safe_string(trade, 'qty')
        isBuyerMaker = self.safe_value_2(trade, 'buyerMaker', 'isBuyerMaker')
        return self.safe_trade({
            'id': id,
            'info': trade,
            'timestamp': time,
            'datetime': self.iso8601(time),
            'symbol': market['symbol'],
            'order': id,
            'type': None,
            'side': None,
            'takerOrMaker': isBuyerMaker == 'maker' if True else 'taker',
            'price': price,
            'amount': qty,
            'cost': None,
            'fee': None,
        }, market)

    async def fetch_order_book(self, symbol: str, limit: Optional[int] = None, params={}):
        """
        fetches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :param str symbol: unified symbol of the market to fetch the order book for
        :param int|None limit: the maximum amount of order book entries to return
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns dict: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        await self.load_markets()
        market = self.market(symbol)
        method = None
        marketType = None
        marketType, params = self.handle_market_type_and_params('fetchOrderBook', market, params)
        if marketType == 'spot':
            method = 'spotV1PublicGetMarketDepth'
        else:
            method = 'swapV2PublicGetQuoteDepth'
        request = {
            'symbol': market['id'],
        }
        if limit is not None:
            request['limit'] = limit
        response = await getattr(self, method)(self.extend(request, params))
        #
        # spot
        #
        #     {
        #         "code": 0,
        #         "data": {
        #           "bids": [
        #             [
        #               "26324.73",
        #               "0.37655"
        #             ],
        #             [
        #               "26324.71",
        #               "0.31888"
        #             ],
        #         ],
        #         "asks": [
        #             [
        #               "26340.30",
        #               "6.45221"
        #             ],
        #             [
        #               "26340.15",
        #               "6.73261"
        #             ],
        #         ]}
        #     }
        #
        # swap
        #
        #     {
        #         "code": 0,
        #         "msg": "",
        #         "data": {
        #           "T": 1683914263304,
        #           "bids": [
        #             [
        #               "26300.90000000",
        #               "30408.00000000"
        #             ],
        #             [
        #               "26300.80000000",
        #               "50906.00000000"
        #             ],
        #         ],
        #         "asks": [
        #             [
        #               "26301.00000000",
        #               "43616.00000000"
        #             ],
        #             [
        #               "26301.10000000",
        #               "49402.00000000"
        #             ],
        #         ]}
        #     }
        #
        orderbook = self.safe_value(response, 'data', {})
        return self.parse_order_book(orderbook, market['symbol'], None, 'bids', 'asks', 0, 1)

    async def fetch_funding_rate(self, symbol: str, params={}):
        """
        fetch the current funding rate
        see https://bingx-api.github.io/docs/swapV2/market-api.html#_5-current-funding-rate
        :param str symbol: unified market symbol
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns dict: a `funding rate structure <https://docs.ccxt.com/#/?id=funding-rate-structure>`
        """
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        response = await self.swapV2PublicGetQuotePremiumIndex(self.extend(request, params))
        #
        #   {
        #       "code":0,
        #       "msg":"",
        #       "data":[
        #         {
        #           "symbol": "BTC-USDT",
        #           "markPrice": "16884.5",
        #           "indexPrice": "16886.9",
        #           "lastFundingRate": "0.0001",
        #           "nextFundingTime": 1672041600000
        #         },
        #         {
        #           "symbol": "ETH-USDT",
        #           "markPrice": "1220.94",
        #           "indexPrice": "1220.68",
        #           "lastFundingRate": "-0.0001",
        #           "nextFundingTime": 1672041600000
        #         }
        #       ]
        #   }
        #
        data = self.safe_value(response, 'data', {})
        return self.parse_funding_rate(data, market)

    def parse_funding_rate(self, contract, market=None):
        #
        #     {
        #       "symbol": "BTC-USDT",
        #       "markPrice": "16884.5",
        #       "indexPrice": "16886.9",
        #       "lastFundingRate": "0.0001",
        #       "nextFundingTime": 1672041600000
        #     }
        #
        symbolId = self.safe_string(contract, 'symbol')
        symbol = self.safe_symbol(symbolId, market, None, 'contract')
        markPrice = self.safe_number(contract, 'markPrice')
        indexPrice = self.safe_number(contract, 'indexPrice')
        fundingRate = self.safe_number(contract, 'lastFundingRate')
        nextFundingTimestamp = self.safe_integer(contract, 'nextFundingTime')
        return {
            'info': contract,
            'symbol': symbol,
            'markPrice': markPrice,
            'indexPrice': indexPrice,
            'interestRate': None,
            'estimatedSettlePrice': None,
            'timestamp': None,
            'datetime': None,
            'fundingRate': fundingRate,
            'fundingTimestamp': None,
            'fundingDatetime': None,
            'nextFundingRate': None,
            'nextFundingTimestamp': nextFundingTimestamp,
            'nextFundingDatetime': None,
            'previousFundingRate': None,
            'previousFundingTimestamp': None,
            'previousFundingDatetime': None,
        }

    async def fetch_funding_rate_history(self, symbol: Optional[str] = None, since: Optional[int] = None, limit: Optional[int] = None, params={}):
        """
        fetches historical funding rate prices
        see https://bingx-api.github.io/docs/swapV2/market-api.html#_6-funding-rate-history
        :param str symbol: unified symbol of the market to fetch the funding rate history for
        :param int|None since: timestamp in ms of the earliest funding rate to fetch
        :param int|None limit: the maximum amount of `funding rate structures <https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure>` to fetch
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns [dict]: a list of `funding rate structures <https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure>`
        """
        self.check_required_symbol('fetchFundingRateHistory', symbol)
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        if since is not None:
            request['startTime'] = since
        if limit is not None:
            request['limit'] = limit
        response = await self.swapV2PublicGetQuoteFundingRate(self.extend(request, params))
        #
        #    {
        #        "code":0,
        #        "msg":"",
        #        "data":[
        #          {
        #            "symbol": "BTC-USDT",
        #            "fundingRate": "0.0001",
        #            "fundingTime": 1585684800000
        #          },
        #          {
        #            "symbol": "BTC-USDT",
        #            "fundingRate": "-0.0017",
        #            "fundingTime": 1585713600000
        #          }
        #        ]
        #    }
        #
        data = self.safe_value(response, 'data', [])
        rates = []
        for i in range(0, len(data)):
            entry = data[i]
            marketId = self.safe_string(entry, 'symbol')
            symbolInner = self.safe_symbol(marketId, market)
            timestamp = self.safe_integer(entry, 'fundingTime')
            rates.append({
                'info': entry,
                'symbol': symbolInner,
                'fundingRate': self.safe_number(entry, 'fundingRate'),
                'timestamp': timestamp,
                'datetime': self.iso8601(timestamp),
            })
        sorted = self.sort_by(rates, 'timestamp')
        return self.filter_by_symbol_since_limit(sorted, market['symbol'], since, limit)

    async def fetch_open_interest(self, symbol: str, params={}):
        """
        Retrieves the open interest of a currency
        see https://bingx-api.github.io/docs/swapV2/market-api.html#_8-get-swap-open-positions
        :param str symbol: Unified CCXT market symbol
        :param dict params: exchange specific parameters
        :returns dict} an open interest structure{@link https://docs.ccxt.com/#/?id=interest-history-structure:
        """
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        response = await self.swapV2PublicGetQuoteOpenInterest(self.extend(request, params))
        #
        #     {
        #         "code": 0,
        #         "msg": "",
        #         "data": {
        #           "openInterest": "3289641547.10",
        #           "symbol": "BTC-USDT",
        #           "time": 1672026617364
        #         }
        #     }
        #
        data = self.safe_value(response, 'data', {})
        return self.parse_open_interest(data, market)

    def parse_open_interest(self, interest, market=None):
        #
        #    {
        #        "openInterest": "3289641547.10",
        #        "symbol": "BTC-USDT",
        #        "time": 1672026617364
        #    }
        #
        timestamp = self.safe_integer(interest, 'time')
        id = self.safe_string(interest, 'symbol')
        symbol = self.safe_symbol(id, market)
        openInterest = self.safe_number(interest, 'openInterest')
        return {
            'symbol': symbol,
            'openInterestAmount': None,
            'openInterestValue': openInterest,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'info': interest,
        }

    async def fetch_ticker(self, symbol: str, params={}):
        """
        fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        see https://bingx-api.github.io/docs/swapV2/market-api.html#_9-get-ticker
        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        self.check_required_symbol('fetchTicker', symbol)
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        response = await self.swapV2PublicGetQuoteTicker(self.extend(request, params))
        #
        #    {
        #        "code": 0,
        #        "msg": "",
        #        "data": {
        #          "symbol": "BTC-USDT",
        #          "priceChange": "52.5",
        #          "priceChangePercent": "0.31",
        #          "lastPrice": "16880.5",
        #          "lastQty": "2.2238",
        #          "highPrice": "16897.5",
        #          "lowPrice": "16726.0",
        #          "volume": "245870.1692",
        #          "quoteVolume": "4151395117.73",
        #          "openPrice": "16832.0",
        #          "openTime": 1672026667803,
        #          "closeTime": 1672026648425
        #        }
        #    }
        #
        data = self.safe_value(response, 'data')
        return self.parse_ticker(data, market)

    async def fetch_tickers(self, symbols: Optional[List[str]] = None, params={}):
        """
        fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
        see https://bingx-api.github.io/docs/swapV2/market-api.html#_9-get-ticker
        :param [str]|None symbols: unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns dict: a dictionary of `ticker structures <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        await self.load_markets()
        symbols = self.market_symbols(symbols)
        response = await self.swapV2PublicGetQuoteTicker(params)
        #
        #    {
        #        "code": 0,
        #        "msg": "",
        #        "data": [
        #            {
        #                "symbol": "BTC-USDT",
        #                "priceChange": "52.5",
        #                "priceChangePercent": "0.31",
        #                "lastPrice": "16880.5",
        #                "lastQty": "2.2238",
        #                "highPrice": "16897.5",
        #                "lowPrice": "16726.0",
        #                "volume": "245870.1692",
        #                "quoteVolume": "4151395117.73",
        #                "openPrice": "16832.0",
        #                "openTime": 1672026667803,
        #                "closeTime": 1672026648425
        #            },
        #        ]
        #    }
        #
        tickers = self.safe_value(response, 'data')
        result = {'info': response}
        for i in range(0, len(tickers)):
            ticker = self.parse_ticker(tickers[i])
            symbol = ticker['symbol']
            if symbols is None:
                result[symbol] = ticker
            elif symbols.find(symbol) >= 0:
                result[symbol] = ticker
        return result

    def parse_ticker(self, ticker, market=None):
        #
        #    {
        #        "symbol": "BTC-USDT",
        #        "priceChange": "52.5",
        #        "priceChangePercent": "0.31",
        #        "lastPrice": "16880.5",
        #        "lastQty": "2.2238",
        #        "highPrice": "16897.5",
        #        "lowPrice": "16726.0",
        #        "volume": "245870.1692",
        #        "quoteVolume": "4151395117.73",
        #        "openPrice": "16832.0",
        #        "openTime": 1672026667803,
        #        "closeTime": 1672026648425
        #    }
        #
        marketId = self.safe_string(ticker, 'symbol')
        symbol = self.safe_symbol(marketId, market)
        open = self.safe_string(ticker, 'openPrice')
        high = self.safe_string(ticker, 'highPrice')
        low = self.safe_string(ticker, 'lowPrice')
        close = self.safe_string(ticker, 'lastPrice')
        quoteVolume = self.safe_string(ticker, 'quoteVolume')
        baseVolume = self.safe_string(ticker, 'volume')
        change = self.safe_string(ticker, 'chapriceChangenge')
        percentage = self.safe_string(ticker, 'priceChangePercent')
        return self.safe_ticker({
            'symbol': symbol,
            'timestamp': None,
            'datetime': None,
            'high': high,
            'low': low,
            'bid': None,
            'bidVolume': None,
            'ask': None,
            'askVolume': None,
            'vwap': None,
            'open': open,
            'close': close,
            'last': None,
            'previousClose': None,
            'change': change,
            'percentage': percentage,
            'average': None,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker,
        }, market)

    async def fetch_balance(self, params={}):
        """
        query for balance and get the amount of funds available for trading or funds locked in orders
        see https://bingx-api.github.io/docs/spot/trade-interface.html#query-assets
        see https://bingx-api.github.io/docs/swapV2/account-api.html#_1-get-perpetual-futures-account-asset-information
        :param dict params: extra parameters specific to the cryptocom api endpoint
        :returns dict: a `balance structure <https://docs.ccxt.com/en/latest/manual.html?#balance-structure>`
        """
        await self.load_markets()
        marketType, marketTypeQuery = self.handle_market_type_and_params('fetchBalance', None, params)
        method = self.get_supported_mapping(marketType, {
            'spot': 'spotV1PrivateGetAccountBalance',
            'swap': 'swapV2PrivateGetUserBalance',
        })
        response = await getattr(self, method)(marketTypeQuery)
        # spot
        #
        #  {
        #      "code": 0,
        #      "msg": "",
        #      "ttl": 1,
        #      "data": {
        #          "balances": [
        #              {
        #                  "asset": "USDT",
        #                  "free": "16.73971130673954",
        #                  "locked": "0"
        #              }
        #          ]
        #      }
        #  }
        #
        # swap
        #
        # {
        #     "code": 0,
        #     "msg": "",
        #     "data": {
        #       "balance": {
        #         "asset": "USDT",
        #         "balance": "15.6128",
        #         "equity": "15.6128",
        #         "unrealizedProfit": "0.0000",
        #         "realisedProfit": "0.0000",
        #         "availableMargin": "15.6128",
        #         "usedMargin": "0.0000",
        #         "freezedMargin": "0.0000"
        #       }
        #     }
        # }
        #
        return self.parse_balance(response)

    def parse_balance(self, response):
        data = self.safe_value(response, 'data')
        balances = self.safe_value_2(data, 'balance', 'balances')
        result = {'info': response}
        if isinstance(balances, list):
            for i in range(0, len(balances)):
                balance = balances[i]
                currencyId = self.safe_string(balance, 'asset')
                code = self.safe_currency_code(currencyId)
                account = self.account()
                account['free'] = self.safe_string(balance, 'free')
                account['used'] = self.safe_string(balance, 'locked')
                result[code] = account
        else:
            currencyId = self.safe_string(balances, 'asset')
            code = self.safe_currency_code(currencyId)
            account = self.account()
            account['free'] = self.safe_string(balances, 'availableMargin')
            account['used'] = self.safe_string(balances, 'usedMargin')
            result[code] = account
        return self.safe_balance(result)

    async def fetch_positions(self, symbols: Optional[List[str]] = None, params={}):
        """
        fetch all open positions
        see https://bingx-api.github.io/docs/swapV2/account-api.html#_2-perpetual-futures-positions
        :param [str]|None symbols: list of unified market symbols
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns [dict]: a list of `position structure <https://docs.ccxt.com/#/?id=position-structure>`
        """
        await self.load_markets()
        market = None
        if symbols is not None:
            first = self.safe_string(symbols, 0)
            market = self.market(first)
        request = {}
        if market is not None:
            request['symbol'] = market['id']
        response = await self.swapV2PrivateGetUserPositions(self.extend(request, params))
        #
        # {
        #     "code": 0,
        #         "msg": "",
        #         "data": [
        #         {
        #             "symbol": "BTC-USDT",
        #             "positionId": "12345678",
        #             "positionSide": "LONG",
        #             "isolated": True,
        #             "positionAmt": "123.33",
        #             "availableAmt": "128.99",
        #             "unrealizedProfit": "1.22",
        #             "realisedProfit": "8.1",
        #             "initialMargin": "123.33",
        #             "avgPrice": "2.2",
        #             "leverage": 10,
        #         }
        #     ]
        # }
        #
        positions = self.safe_value(response, 'data', [])
        result = []
        for i in range(0, len(positions)):
            result.append(self.parse_position(positions[i]))
        symbols = self.market_symbols(symbols)
        return self.filter_by_array(result, 'symbol', symbols, False)

    def parse_position(self, position, market=None):
        #
        #     {
        #         "symbol": "BTC-USDT",
        #         "positionId": "12345678",
        #         "positionSide": "LONG",
        #         "isolated": True,
        #         "positionAmt": "123.33",
        #         "availableAmt": "128.99",
        #         "unrealizedProfit": "1.22",
        #         "realisedProfit": "8.1",
        #         "initialMargin": "123.33",
        #         "avgPrice": "2.2",
        #         "leverage": 10,
        #     }
        #
        marketId = self.safe_string(position, 'symbol')
        market = self.safe_market(marketId, market)
        symbol = market['symbol']
        isolated = self.safe_value(position, 'isolated')
        marginMode = 'isolated' if isolated else 'cross'
        id = self.safe_string(position, 'positionId')
        side = self.safe_string_lower(position, 'positionSide')
        entryPrice = self.safe_number(position, 'avgPrice')
        unrealizedPnl = self.safe_number(position, 'unrealizedProfit')
        initialMargin = self.safe_number(position, 'initialMargin')
        leverage = self.safe_number(position, 'leverage')
        notional = self.safe_string(position, 'positionAmt')
        collateral = self.safe_string(position, 'positionAmt')
        return self.safe_position({
            'info': position,
            'id': id,
            'symbol': symbol,
            'notional': notional,
            'marginMode': marginMode,
            'liquidationPrice': None,
            'entryPrice': entryPrice,
            'unrealizedPnl': unrealizedPnl,
            'percentage': None,
            'contracts': None,
            'contractSize': None,
            'markPrice': None,
            'lastPrice': None,
            'side': side,
            'hedged': None,
            'timestamp': None,
            'datetime': None,
            'lastUpdateTimestamp': None,
            'maintenanceMargin': None,
            'maintenanceMarginPercentage': None,
            'collateral': collateral,
            'initialMargin': initialMargin,
            'initialMarginPercentage': None,
            'leverage': leverage,
            'marginRatio': None,
        })

    async def create_order(self, symbol: str, type, side: OrderSide, amount, price=None, params={}):
        """
        create a trade order
        see https://bingx-api.github.io/docs/spot/trade-interface.html#create-an-order
        see https://bingx-api.github.io/docs/swapV2/trade-api.html#_1-trade-order
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of currency you want to trade in units of base currency
        :param float|None price: the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        await self.load_markets()
        market = self.market(symbol)
        marketType, query = self.handle_market_type_and_params('createOrder', market, params)
        request = {
            'symbol': market['id'],
            'type': type.upper(),
            'side': side.upper(),
        }
        stopPrice = self.safe_value_2(params, 'stopPrice', 'triggerPrice')
        request['quantity'] = self.amount_to_precision(symbol, amount)
        quoteOrderQty = self.safe_number(params, 'quoteOrderQty')
        exchangeSpecificTifParam = self.safe_string_upper_n(params, ['force', 'timeInForceValue', 'timeInForce'])
        if quoteOrderQty is not None:
            request['quoteOrderQty'] = self.amount_to_precision(symbol, quoteOrderQty)
        if type == 'limit':
            request['price'] = self.price_to_precision(symbol, price)
        if stopPrice is not None:
            request['stopPrice'] = self.price_to_precision(symbol, price)
        if exchangeSpecificTifParam == 'IOC':
            request['timeInForce'] = 'IOC'
        elif exchangeSpecificTifParam == 'POC':
            request['timeInForce'] = 'POC'
        method = self.get_supported_mapping(marketType, {
            'spot': 'spotV1PrivatePostTradeOrder',
            'swap': 'swapV2PrivatePostTradeOrder',
        })
        response = await getattr(self, method)(self.extend(request, query))
        #
        # spot
        # {
        #     "code": 0,
        #     "msg": "",
        #     "data": {
        #         "symbol": "XRP-USDT",
        #         "orderId": 1514090846268424192,
        #         "transactTime": 1649822362855,
        #         "price": "0.5",
        #         "origQty": "10",
        #         "executedQty": "0",
        #         "cummulativeQuoteQty": "0",
        #         "status": "PENDING",
        #         "type": "LIMIT",
        #         "side": "BUY"
        #     }
        # }
        #
        # swap
        #
        # {
        #     "code": 0,
        #     "msg": "",
        #     "data": {
        #       "order": {
        #         "symbol": "BTC-USDT",
        #         "orderId": 1590973236294713344,
        #         "side": "BUY",
        #         "positionSide": "LONG",
        #         "type": "LIMIT"
        #       }
        #     }
        # }
        #
        data = self.safe_value(response, 'data')
        first = self.safe_value(data, 'order', data)
        return self.parse_order(first, market)

    def parse_order(self, order, market=None):
        #
        # spot
        # createOrder, cancelOrder
        #
        #    {
        #        "symbol": "XRP-USDT",
        #        "orderId": 1514090846268424192,
        #        "transactTime": 1649822362855,
        #        "price": "0.5",
        #        "origQty": "10",
        #        "executedQty": "0",
        #        "cummulativeQuoteQty": "0",
        #        "status": "PENDING",
        #        "type": "LIMIT",
        #        "side": "BUY"
        #    }
        #
        # fetchOrder
        #
        #    {
        #        symbol: 'ETH-USDT',
        #        orderId: '1660602123001266176',
        #        price: '1700',
        #        origQty: '0.003',
        #        executedQty: '0',
        #        cummulativeQuoteQty: '0',
        #        status: 'PENDING',
        #        type: 'LIMIT',
        #        side: 'BUY',
        #        time: '1684753373276',
        #        updateTime: '1684753373276',
        #        origQuoteOrderQty: '0',
        #        fee: '0',
        #        feeAsset: 'ETH'
        #    }
        #
        # fetchOpenOrders, fetchClosedOrders
        #
        #   {
        #       "symbol": "XRP-USDT",
        #       "orderId": 1514073325788200960,
        #       "price": "0.5",
        #       "origQty": "20",
        #       "executedQty": "0",
        #       "cummulativeQuoteQty": "0",
        #       "status": "PENDING",
        #       "type": "LIMIT",
        #       "side": "BUY",
        #       "time": 1649818185647,
        #       "updateTime": 1649818185647,
        #       "origQuoteOrderQty": "0"
        #   }
        #
        #
        # swap
        # createOrder
        #
        #    {
        #      "symbol": "BTC-USDT",
        #      "orderId": 1590973236294713344,
        #      "side": "BUY",
        #      "positionSide": "LONG",
        #      "type": "LIMIT"
        #    }
        #
        # fetchOrder, fetchOpenOrders, fetchClosedOrders
        #
        #    {
        #        "symbol": "LINK-USDT",
        #        "orderId": 1585839271162413056,
        #        "side": "BUY",
        #        "positionSide": "LONG",
        #        "type": "TRIGGER_MARKET",
        #        "origQty": "5.0",
        #        "price": "9",
        #        "executedQty": "0.0",
        #        "avgPrice": "0",
        #        "cumQuote": "0",
        #        "stopPrice": "5",
        #        "profit": "0.0000",
        #        "commission": "0.000000",
        #        "status": "CANCELLED",
        #        "time": 1667631605000,
        #        "updateTime": 1667631605000
        #    }
        #
        marketId = self.safe_string(order, 'symbol')
        market = self.safe_market(marketId, market)
        symbol = market['symbol']
        orderId = self.safe_string(order, 'orderId')
        side = self.safe_string_lower(order, 'side')
        type = self.safe_string_lower(order, 'type')
        timestamp = self.safe_integer_2(order, 'time', 'transactTime')
        lastTradeTimestamp = self.safe_integer(order, 'updateTime')
        price = self.safe_string(order, 'price')
        average = self.safe_string(order, 'avgPrice')
        amount = self.safe_string(order, 'origQty')
        filled = self.safe_string(order, 'executedQty')
        status = self.safe_string_lower(order, 'status')
        status = status == 'open' if 'pending' else status
        fee = self.safe_string_2(order, 'fee', 'commission')
        return self.safe_order({
            'info': order,
            'id': orderId,
            'clientOrderId': None,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'lastTradeTimestamp': lastTradeTimestamp,
            'symbol': symbol,
            'type': type,
            'timeInForce': None,
            'postOnly': None,
            'side': side,
            'price': price,
            'stopPrice': self.safe_number(order, 'triggerPrice'),
            'triggerPrice': self.safe_number(order, 'triggerPrice'),
            'average': average,
            'cost': None,
            'amount': amount,
            'filled': filled,
            'remaining': None,
            'status': status,
            'fee': fee,
            'trades': None,
        }, market)

    async def cancel_order(self, id: str, symbol: Optional[str] = None, params={}):
        """
        cancels an open order
        see https://bingx-api.github.io/docs/spot/trade-interface.html#cancel-an-order
        see https://bingx-api.github.io/docs/swapV2/trade-api.html#_4-cancel-an-order
        :param str id: order id
        :param str symbol: unified symbol of the market the order was made in
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.check_required_symbol('cancelOrder', symbol)
        await self.load_markets()
        market = self.market(symbol)
        marketType, query = self.handle_market_type_and_params('cancelOrder', market, params)
        method = self.get_supported_mapping(marketType, {
            'spot': 'spotV1PrivatePostTradeCancel',
            'swap': 'swapV2PrivateDeleteTradeOrder',
        })
        request = {
            'symbol': market['id'],
            'orderId': id,
        }
        response = await getattr(self, method)(self.extend(request, query))
        #
        # spot
        #
        #   {
        #       "code": 0,
        #       "msg": "",
        #       "data": {
        #           "symbol": "XRP-USDT",
        #           "orderId": 1514090846268424192,
        #           "price": "0.5",
        #           "origQty": "10",
        #           "executedQty": "0",
        #           "cummulativeQuoteQty": "0",
        #           "status": "CANCELED",
        #           "type": "LIMIT",
        #           "side": "BUY"
        #       }
        #   }
        #
        # swap
        #
        #    {
        #        "code": 0,
        #        "msg": "",
        #        "data": {
        #          "order": {
        #            "symbol": "LINK-USDT",
        #            "orderId": 1597783850786750464,
        #            "side": "BUY",
        #            "positionSide": "LONG",
        #            "type": "TRIGGER_MARKET",
        #            "origQty": "5.0",
        #            "price": "5.0000",
        #            "executedQty": "0.0",
        #            "avgPrice": "0.0000",
        #            "cumQuote": "0",
        #            "stopPrice": "5.0000",
        #            "profit": "",
        #            "commission": "",
        #            "status": "CANCELLED",
        #            "time": 1669776330000,
        #            "updateTime": 1669776330000
        #          }
        #        }
        #    }
        #
        data = self.safe_value(response, 'data')
        first = self.safe_value(data, 'order', data)
        return self.parse_order(first, market)

    async def cancel_all_orders(self, symbol: Optional[str] = None, params={}):
        """
        cancel all open orders
        :param str|None symbol: unified market symbol, only orders in the market of self symbol are cancelled when symbol is not None
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns [dict]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.check_required_symbol('cancelAllOrders', symbol)
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        response = await self.swapV2PrivateDeleteTradeAllOpenOrders(self.extend(request, params))
        #
        #   {
        #       "code": 0,
        #       "msg": "",
        #       "data": {
        #         "success": [
        #           {
        #             "symbol": "LINK-USDT",
        #             "orderId": 1597783835095859200,
        #             "side": "BUY",
        #             "positionSide": "LONG",
        #             "type": "TRIGGER_LIMIT",
        #             "origQty": "5.0",
        #             "price": "9.0000",
        #             "executedQty": "0.0",
        #             "avgPrice": "0.0000",
        #             "cumQuote": "0",
        #             "stopPrice": "9.5000",
        #             "profit": "",
        #             "commission": "",
        #             "status": "NEW",
        #             "time": 1669776326000,
        #             "updateTime": 1669776326000
        #           }
        #         ],
        #         "failed": null
        #       }
        #   }
        #
        return response

    async def cancel_orders(self, ids: List[int], symbol: Optional[str] = None, params={}):
        """
        cancel multiple orders
        :param [str] ids: order ids
        :param str symbol: unified market symbol, default is None
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns dict: an list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.check_required_symbol('cancelOrders', symbol)
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
            'ids': ids,
        }
        response = await self.swapV2PrivateDeleteTradeBatchOrders(self.extend(request, params))
        #
        #    {
        #        "code": 0,
        #        "msg": "",
        #        "data": {
        #          "success": [
        #            {
        #              "symbol": "LINK-USDT",
        #              "orderId": 1597783850786750464,
        #              "side": "BUY",
        #              "positionSide": "LONG",
        #              "type": "TRIGGER_MARKET",
        #              "origQty": "5.0",
        #              "price": "5.5710",
        #              "executedQty": "0.0",
        #              "avgPrice": "0.0000",
        #              "cumQuote": "0",
        #              "stopPrice": "5.0000",
        #              "profit": "0.0000",
        #              "commission": "0.000000",
        #              "status": "CANCELLED",
        #              "time": 1669776330000,
        #              "updateTime": 1672370837000
        #            }
        #          ],
        #          "failed": null
        #        }
        #    }
        #
        return response

    async def fetch_order(self, id: str, symbol: Optional[str] = None, params={}):
        """
        fetches information on an order made by the user
        see https://bingx-api.github.io/docs/spot/trade-interface.html#query-orders
        see https://bingx-api.github.io/docs/swapV2/trade-api.html#_8-query-order
        :param str symbol: unified symbol of the market the order was made in
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.check_required_symbol('fetchOrders', symbol)
        await self.load_markets()
        market = self.market(symbol)
        marketType, query = self.handle_market_type_and_params('fetchOrder', market, params)
        method = self.get_supported_mapping(marketType, {
            'spot': 'spotV1PrivateGetTradeQuery',
            'swap': 'swapV2PrivateGetTradeOrder',
        })
        request = {
            'symbol': market['id'],
            'orderId': id,
        }
        response = await getattr(self, method)(self.extend(request, query))
        #
        # spot
        #
        #     {
        #         "code": 0,
        #         "msg": "",
        #         "data": {
        #             "symbol": "XRP-USDT",
        #             "orderId": 1514087361158316032,
        #             "price": "0.5",
        #             "origQty": "10",
        #             "executedQty": "0",
        #             "cummulativeQuoteQty": "0",
        #             "status": "CANCELED",
        #             "type": "LIMIT",
        #             "side": "BUY",
        #             "time": 1649821532000,
        #             "updateTime": 1649821543000,
        #             "origQuoteOrderQty": "0",
        #             "fee": "0",
        #             "feeAsset": "XRP"
        #         }
        #     }
        #
        # swap
        #
        #      {
        #          "code": 0,
        #          "msg": "",
        #          "data": {
        #            "order": {
        #              "symbol": "BTC-USDT",
        #              "orderId": 1597597642269917184,
        #              "side": "SELL",
        #              "positionSide": "LONG",
        #              "type": "TAKE_PROFIT_MARKET",
        #              "origQty": "1.0000",
        #              "price": "0.0",
        #              "executedQty": "0.0000",
        #              "avgPrice": "0.0",
        #              "cumQuote": "",
        #              "stopPrice": "16494.0",
        #              "profit": "",
        #              "commission": "",
        #              "status": "FILLED",
        #              "time": 1669731935000,
        #              "updateTime": 1669752524000
        #            }
        #          }
        #      }
        #
        data = self.safe_value(response, 'data')
        first = self.safe_value(data, 'order', data)
        return self.parse_order(first, market)

    async def fetch_open_orders(self, symbol: Optional[str] = None, since: Optional[int] = None, limit: Optional[int] = None, params={}):
        """
        see https://bingx-api.github.io/docs/spot/trade-interface.html#query-open-orders
        see https://bingx-api.github.io/docs/swapV2/trade-api.html#_14-user-s-history-orders
        fetch all unfilled currently open orders
        :param str symbol: unified market symbol
        :param int|None since: the earliest time in ms to fetch open orders for
        :param int|None limit: the maximum number of open order structures to retrieve
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns [dict]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.check_required_symbol('fetchOrders', symbol)
        await self.load_markets()
        market = self.market(symbol)
        marketType, query = self.handle_market_type_and_params('fetchOrder', market, params)
        method = self.get_supported_mapping(marketType, {
            'spot': 'spotV1PrivateGetTradeOpenOrders',
            'swap': 'swapV2PrivateGetTradeOpenOrders',
        })
        request = {
            'symbol': market['id'],
        }
        response = await getattr(self, method)(self.extend(request, query))
        #
        #  spot
        #
        #   {
        #       "code": 0,
        #       "msg": "",
        #       "data": {
        #           "orders": [
        #               {
        #                   "symbol": "XRP-USDT",
        #                   "orderId": 1514073325788200960,
        #                   "price": "0.5",
        #                   "origQty": "20",
        #                   "executedQty": "0",
        #                   "cummulativeQuoteQty": "0",
        #                   "status": "PENDING",
        #                   "type": "LIMIT",
        #                   "side": "BUY",
        #                   "time": 1649818185647,
        #                   "updateTime": 1649818185647,
        #                   "origQuoteOrderQty": "0"
        #               }
        #           ]
        #       }
        #   }
        #
        # swap
        #
        #   {
        #       "code": 0,
        #       "msg": "",
        #       "data": {
        #         "orders": [
        #           {
        #             "symbol": "LINK-USDT",
        #             "orderId": 1585839271162413056,
        #             "side": "BUY",
        #             "positionSide": "LONG",
        #             "type": "TRIGGER_MARKET",
        #             "origQty": "5.0",
        #             "price": "9",
        #             "executedQty": "0.0",
        #             "avgPrice": "0",
        #             "cumQuote": "0",
        #             "stopPrice": "5",
        #             "profit": "0.0000",
        #             "commission": "0.000000",
        #             "status": "CANCELLED",
        #             "time": 1667631605000,
        #             "updateTime": 1667631605000
        #           },
        #         ]
        #       }
        #   }
        #
        data = self.safe_value(response, 'data', [])
        orders = self.safe_value(data, 'orders', [])
        return self.parse_orders(orders, market, since, limit)

    async def fetch_closed_orders(self, symbol: Optional[str] = None, since: Optional[int] = None, limit: Optional[int] = None, params={}):
        """
        fetches information on multiple closed orders made by the user
        see https://bingx-api.github.io/docs/spot/trade-interface.html#query-order-history
        see https://bingx-api.github.io/docs/swapV2/trade-api.html#_14-user-s-history-orders
        :param str|None symbol: unified market symbol of the market orders were made in
        :param int|None since: the earliest time in ms to fetch orders for
        :param int|None limit: the maximum number of  orde structures to retrieve
        :param dict params: extra parameters specific to the bingx api endpoint
        :param int|None params['until']: the latest time in ms to fetch orders for
        :returns [dict]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.check_required_symbol('fetchOrders', symbol)
        await self.load_markets()
        market = self.market(symbol)
        marketType, query = self.handle_market_type_and_params('fetchOrder', market, params)
        method = self.get_supported_mapping(marketType, {
            'spot': 'spotV1PrivateGetTradeHistoryOrders',
            'swap': 'swapV2PrivateGetTradeAllOrders',
        })
        request = {
            'symbol': market['id'],
        }
        response = await getattr(self, method)(self.extend(request, query))
        #
        #  spot
        #
        #    {
        #        "code": 0,
        #        "msg": "",
        #        "data": {
        #            "orders": [
        #                {
        #                    "symbol": "XRP-USDT",
        #                    "orderId": 1514073325788200960,
        #                    "price": "0.5",
        #                    "origQty": "20",
        #                    "executedQty": "0",
        #                    "cummulativeQuoteQty": "0",
        #                    "status": "PENDING",
        #                    "type": "LIMIT",
        #                    "side": "BUY",
        #                    "time": 1649818185647,
        #                    "updateTime": 1649818185647,
        #                    "origQuoteOrderQty": "0"
        #                }
        #            ]
        #        }
        #    }
        #
        # swap
        #
        #    {
        #        "code": 0,
        #        "msg": "",
        #        "data": {
        #          "orders": [
        #            {
        #              "symbol": "LINK-USDT",
        #              "orderId": 1585839271162413056,
        #              "side": "BUY",
        #              "positionSide": "LONG",
        #              "type": "TRIGGER_MARKET",
        #              "origQty": "5.0",
        #              "price": "9",
        #              "executedQty": "0.0",
        #              "avgPrice": "0",
        #              "cumQuote": "0",
        #              "stopPrice": "5",
        #              "profit": "0.0000",
        #              "commission": "0.000000",
        #              "status": "CANCELLED",
        #              "time": 1667631605000,
        #              "updateTime": 1667631605000
        #            },
        #          ]
        #        }
        #    }
        #
        data = self.safe_value(response, 'data', [])
        orders = self.safe_value(data, 'orders', [])
        return self.parse_orders(orders, market, since, limit)

    async def transfer(self, code: str, amount, fromAccount: str, toAccount: str, params={}):
        """
        transfer currency internally between wallets on the same account
        see https://bingx-api.github.io/docs/spot/user-interface.html#user-transfer-deposit-withdrawal
        :param str code: unified currency code
        :param float amount: amount to transfer
        :param str fromAccount: account to transfer from
        :param str toAccount: account to transfer to
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns dict: a `transfer structure <https://docs.ccxt.com/#/?id=transfer-structure>`
        """
        await self.load_markets()
        currency = self.currency(code)
        accountsByType = self.safe_value(self.options, 'accountsByType', {})
        fromId = self.safe_string(accountsByType, fromAccount, fromAccount)
        toId = self.safe_string(accountsByType, toAccount, toAccount)
        request = {
            'asset': currency['id'],
            'amount': self.currency_to_precision(code, amount),
            'type': fromId + '_' + toId,
        }
        response = await self.spotV3PrivateGetGetAssetTransfer(self.extend(request, params))
        #
        #   {
        #       "tranId":13526853623
        #   }
        #
        return {
            'info': response,
            'id': self.safe_string(response, 'tranId'),
            'timestamp': None,
            'datetime': None,
            'currency': code,
            'amount': amount,
            'fromAccount': fromAccount,
            'toAccount': toAccount,
            'status': None,
        }

    async def fetch_transfers(self, code: Optional[str] = None, since: Optional[int] = None, limit: Optional[int] = None, params={}):
        """
        fetch a history of internal transfers made on an account
        see https://bingx-api.github.io/docs/spot/user-interface.html#user-universal-transfer
        :param str|None code: unified currency code of the currency transferred
        :param int|None since: the earliest time in ms to fetch transfers for
        :param int|None limit: the maximum number of transfers structures to retrieve
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns [dict]: a list of `transfer structures <https://docs.ccxt.com/#/?id=transfer-structure>`
        """
        await self.load_markets()
        currency = self.currency(code)
        accountsByType = self.safe_value(self.options, 'accountsByType', {})
        fromAccount = self.safe_string(params, 'fromAccount')
        toAccount = self.safe_string(params, 'toAccount')
        fromId = self.safe_string(accountsByType, fromAccount, fromAccount)
        toId = self.safe_string(accountsByType, toAccount, toAccount)
        if fromId is None or toId is None:
            raise ExchangeError(self.id + ' fromAccount & toAccount parameter are required')
        request = {
            'type': fromId + '_' + toId,
        }
        if since is not None:
            request['startTime'] = since
        if limit is not None:
            request['size'] = limit
        response = await self.spotV3PrivateGetAssetTransfer(self.extend(request, params))
        #
        #     {
        #         total: 3,
        #         rows: [
        #             {
        #                 "asset":"USDT",
        #                 "amount":"-100.00000000000000000000",
        #                 "type":"FUND_SFUTURES",
        #                 "status":"CONFIRMED",
        #                 "tranId":1067594500957016069,
        #                 "timestamp":1658388859000
        #             },
        #         ]
        #     }
        #
        rows = self.safe_value(response, 'rows', [])
        return self.parse_transfers(rows, currency, since, limit)

    def parse_transfer(self, transfer, currency=None):
        tranId = self.safe_string(transfer, 'tranId')
        timestamp = self.safe_integer(transfer, 'timestamp')
        currencyCode = self.safe_currency_code(None, currency)
        status = self.safe_string(transfer, 'status')
        accountsById = self.safe_value(self.options, 'accountsById', {})
        typeId = self.safe_string(transfer, 'type')
        typeIdSplit = typeId.split('_')
        fromId = self.safe_string(accountsById, typeIdSplit[0], typeIdSplit[0])
        toId = self.safe_string(accountsById, typeIdSplit[1], typeIdSplit[1])
        return {
            'info': transfer,
            'id': tranId,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'currency': currencyCode,
            'amount': self.safe_number(transfer, 'amount'),
            'fromAccount': fromId,
            'toAccount': toId,
            'status': status,
        }

    async def fetch_deposits(self, code: Optional[str] = None, since: Optional[int] = None, limit: Optional[int] = None, params={}):
        """
        fetch all deposits made to an account
        see https://bingx-api.github.io/docs/spot/user-interface.html#deposit-history-supporting-network
        :param str|None code: unified currency code
        :param int|None since: the earliest time in ms to fetch deposits for
        :param int|None limit: the maximum number of deposits structures to retrieve
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns [dict]: a list of `transaction structures <https://docs.ccxt.com/#/?id=transaction-structure>`
        """
        await self.load_markets()
        request = {
        }
        currency = None
        if code is not None:
            currency = self.currency(code)
            request['coin'] = currency['id']
        if since is not None:
            request['startTime'] = since
        if limit is not None:
            request['limit'] = limit  # default 1000
        response = await self.spotV3PrivateGetCapitalDepositHisrec(self.extend(request, params))
        #
        #   [
        #       {
        #           "amount":"0.00999800",
        #           "coin":"PAXG",
        #           "network":"ETH",
        #           "status":1,
        #           "address":"0x788cabe9236ce061e5a892e1a59395a81fc8d62c",
        #           "addressTag":"",
        #           "txId":"0xaad4654a3234aa6118af9b4b335f5ae81c360b2394721c019b5d1e75328b09f3",
        #           "insertTime":1599621997000,
        #           "transferType":0,
        #           "unlockConfirm":"12/12",  # confirm times for unlocking
        #           "confirmTimes":"12/12"
        #       },
        #   ]
        #
        return self.parse_transactions(response, currency, since, limit)

    async def fetch_withdrawals(self, code: Optional[str] = None, since: Optional[int] = None, limit: Optional[int] = None, params={}):
        """
        fetch all withdrawals made from an account
        see https://bingx-api.github.io/docs/spot/user-interface.html#withdraw-history-supporting-network
        :param str|None code: unified currency code
        :param int|None since: the earliest time in ms to fetch withdrawals for
        :param int|None limit: the maximum number of withdrawals structures to retrieve
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns [dict]: a list of `transaction structures <https://docs.ccxt.com/#/?id=transaction-structure>`
        """
        await self.load_markets()
        request = {
        }
        currency = None
        if code is not None:
            currency = self.currency(code)
            request['coin'] = currency['id']
        if since is not None:
            request['startTime'] = since
        if limit is not None:
            request['limit'] = limit  # default 1000
        response = await self.spotV3PrivateGetCapitalWithdrawHistory(self.extend(request, params))
        #
        #   [
        #       {
        #           "address": "0x94df8b352de7f46f64b01d3666bf6e936e44ce60",
        #           "amount": "8.91000000",
        #           "applyTime": "2019-10-12 11:12:02",
        #           "coin": "USDT",
        #           "id": "b6ae22b3aa844210a7041aee7589627c",
        #           "withdrawOrderId": "WITHDRAWtest123",
        #           "network": "ETH",
        #           "transferType": 0
        #           "status": 6,
        #           "transactionFee": "0.004",
        #           "confirmNo":3,
        #           "info": "The address is not valid. Please confirm with the recipient",
        #           "txId": "0xb5ef8c13b968a406cc62a93a8bd80f9e9a906ef1b3fcf20a2e48573c17659268"
        #       },
        #   ]
        #
        withdrawals = self.safe_value(response, 'data', [])
        return self.parse_transactions(withdrawals, currency, since, limit)

    def parse_transaction(self, transaction, currency=None):
        #
        # fetchDeposits
        #
        #    {
        #        "amount":"0.00999800",
        #        "coin":"PAXG",
        #        "network":"ETH",
        #        "status":1,
        #        "address":"0x788cabe9236ce061e5a892e1a59395a81fc8d62c",
        #        "addressTag":"",
        #        "txId":"0xaad4654a3234aa6118af9b4b335f5ae81c360b2394721c019b5d1e75328b09f3",
        #        "insertTime":1599621997000,
        #        "transferType":0,
        #        "unlockConfirm":"12/12",  # confirm times for unlocking
        #        "confirmTimes":"12/12"
        #    }
        #
        # fetchWithdrawals
        #
        #    {
        #        "address": "0x94df8b352de7f46f64b01d3666bf6e936e44ce60",
        #        "amount": "8.91000000",
        #        "applyTime": "2019-10-12 11:12:02",
        #        "coin": "USDT",
        #        "id": "b6ae22b3aa844210a7041aee7589627c",
        #        "withdrawOrderId": "WITHDRAWtest123",
        #        "network": "ETH",
        #        "transferType": 0
        #        "status": 6,
        #        "transactionFee": "0.004",
        #        "confirmNo":3,
        #        "info": "The address is not valid. Please confirm with the recipient",
        #        "txId": "0xb5ef8c13b968a406cc62a93a8bd80f9e9a906ef1b3fcf20a2e48573c17659268"
        #    }
        #
        address = self.safe_string(transaction, 'address')
        tag = self.safe_string(transaction, 'addressTag')
        timestamp = self.safe_integer(transaction, 'insertTime')
        if timestamp is None:
            applyTime = self.safe_string(transaction, 'applyTime')
            timestamp = self.parse8601(applyTime)
        currencyId = self.safe_string(transaction, 'coin')
        code = self.safe_currency_code(currencyId, currency)
        return {
            'info': transaction,
            'id': self.safe_string(transaction, 'id'),
            'txid': self.safe_string(transaction, 'txId'),
            'type': self.safe_string(transaction, 'transferType'),
            'currency': code,
            'network': self.safe_string(transaction, 'network'),
            'amount': self.safe_number(transaction, 'amount'),
            'status': self.parse_transaction_status(self.safe_string(transaction, 'status')),
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'address': address,
            'addressFrom': None,
            'addressTo': address,
            'tag': tag,
            'tagFrom': tag,
            'tagTo': None,
            'updated': None,
            'comment': self.safe_string(transaction, 'info'),
            'fee': {
                'currency': code,
                'cost': self.safe_number(transaction, 'transactionFee'),
                'rate': None,
            },
        }

    def parse_transaction_status(self, status):
        statuses = {
            '0': 'ok',
            '10': 'pending',
            '20': 'rejected',
            '30': 'ok',
            '40': 'rejected',
            '50': 'ok',
            '60': 'pending',
            '70': 'rejected',
            '2': 'pending',
            '3': 'rejected',
            '4': 'pending',
            '5': 'rejected',
            '6': 'ok',
        }
        return self.safe_string(statuses, status, status)

    async def set_margin_mode(self, marginMode: str, symbol: Optional[str] = None, params={}):
        """
        set margin mode to 'cross' or 'isolated'
        see https://bingx-api.github.io/docs/swapV2/trade-api.html#_10-switch-margin-mode
        :param str marginMode: 'cross' or 'isolated'
        :param str symbol: unified market symbol
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns dict: response from the exchange
        """
        self.check_required_symbol('setMarginMode', symbol)
        marginMode = marginMode.upper()
        if marginMode == 'CROSS':
            marginMode = 'CROSSED'
        if marginMode != 'ISOLATED' and marginMode != 'CROSSED':
            raise BadRequest(self.id + ' setMarginMode() marginMode argument should be isolated or cross')
        await self.load_markets()
        market = self.market(symbol)
        if market['type'] != 'swap':
            raise BadSymbol(self.id + ' setMarginMode() supports swap contracts only')
        request = {
            'symbol': market['id'],
            'marginType': marginMode,
        }
        return await self.swapV2PrivatePostTradeMarginType(self.extend(request, params))

    async def set_margin(self, symbol: str, amount, params={}):
        """
        Either adds or reduces margin in an isolated position in order to set the margin to a specific value
        see https://bingx-api.github.io/docs/swapV2/trade-api.html#_15-adjust-isolated-margin
        :param str symbol: unified market symbol of the market to set margin in
        :param float amount: the amount to set the margin to
        :param dict params: parameters specific to the bingx api endpoint
        :returns dict: A `margin structure <https://docs.ccxt.com/#/?id=add-margin-structure>`
        """
        await self.load_markets()
        market = self.market(symbol)
        type = self.safe_integer(params, 'type')  #  1 increase margin 2 decrease margin
        self.check_required_argument('setMargin', type, 'type')
        request = {
            'symbol': market['id'],
            'amount': self.amount_to_precision(market['symbol'], amount),
            'type': type,
        }
        response = await self.swapV2PrivatePostTradePositionMargin(self.extend(request, params))
        #
        #    {
        #        "code": 0,
        #        "msg": "",
        #        "amount": 1,
        #        "type": 1
        #    }
        #
        return response

    async def fetch_leverage(self, symbol: str, params={}):
        """
        fetch the set leverage for a market
        see https://bingx-api.github.io/docs/swapV2/trade-api.html#_11-query-leverage
        :param str symbol: unified market symbol
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns dict: a `leverage structure <https://docs.ccxt.com/#/?id=leverage-structure>`
        """
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        response = await self.swapV2PrivateGetTradeLeverage(self.extend(request, params))
        #
        #   {
        #       "code": 0,
        #       "msg": "",
        #       "data": {
        #         "longLeverage": 6,
        #         "shortLeverage": 6
        #       }
        #   }
        #
        return response

    async def set_leverage(self, leverage: int, symbol: Optional[str] = None, params={}):
        """
        set the level of leverage for a market
        see https://bingx-api.github.io/docs/swapV2/trade-api.html#_12-switch-leverage
        :param float leverage: the rate of leverage
        :param str symbol: unified market symbol
        :param dict params: extra parameters specific to the bingx api endpoint
        :returns dict: response from the exchange
        """
        self.check_required_symbol('setLeverage', symbol)
        await self.load_markets()
        market = self.market(symbol)
        side = self.safe_string_upper(params, 'side')
        self.check_required_argument('setLeverage', side, 'side')
        request = {
            'symbol': market['id'],
            'side': side,
            'leverage': leverage,
        }
        #
        #   {
        #       "code": 0,
        #       "msg": "",
        #       "data": {
        #         "leverage": 6,
        #         "symbol": "BTC-USDT"
        #       }
        #   }
        #
        return await self.swapV2PrivatePostTradeLeverage(self.extend(request, params))

    def sign(self, path, section='public', method='GET', params={}, headers=None, body=None):
        type = section[0]
        version = section[1]
        access = section[2]
        url = self.implode_hostname(self.urls['api'][type])
        if type == 'spot' and version == 'v3':
            url += '/api'
        else:
            url += '/' + type
        url += '/' + version + '/'
        path = self.implode_params(path, params)
        url += path
        params = self.omit(params, self.extract_params(path))
        params = self.keysort(params)
        if access == 'public':
            if params:
                url += '?' + self.urlencode(params)
        elif access == 'private':
            self.check_required_credentials()
            params['timestamp'] = self.nonce()
            query = self.urlencode(params)
            signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)
            if params:
                query = '?' + query + '&'
            else:
                query += '?'
            query += 'signature=' + signature
            headers = {
                'X-BX-APIKEY': self.apiKey,
            }
            url += query
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def nonce(self):
        return self.milliseconds()

    def handle_errors(self, httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody):
        if response is None:
            return None  # fallback to default error handler
        #
        # {
        #     "code": 80014,
        #     "msg": "Invalid parameters, err:Key: 'GetTickerRequest.Symbol' Error:Field validation for 'Symbol' failed on the 'len=0|endswith=-USDT' tag",
        #     "data": {
        #
        #     }
        # }
        #
        code = self.safe_string(response, 'code')
        message = self.safe_string(response, 'msg')
        if code is not None and code != '0':
            feedback = self.id + ' ' + body
            self.throw_exactly_matched_exception(self.exceptions['exact'], message, feedback)
            self.throw_exactly_matched_exception(self.exceptions['exact'], code, feedback)
            self.throw_broadly_matched_exception(self.exceptions['broad'], message, feedback)
            raise ExchangeError(feedback)  # unknown message
        return None
